try { yield; l() }
catch ([e]=yield l) { return 12 }
finally { yield }

<container:try>
  <container:main>
    <seg a>yield</seg>
    <seg b>yield sent</seg>
  </container>
  <container:handler>
    <seg c>
       a = arrIter(err)
       b = a.get()
    </seg>
    <container:if>
      <seg:test e>unornull(b)</seg>
      <seg l>yield l</seg>
      <seg n>b = sent</seg>
    </container>
    <seg r>
       e = b
       yield
    </seg>
  </container>
  <container:finalizer>
    <seg v>yield</seg>
    <seg:throwret w></seg>
  </container>
</container>

if state <= w {
 do {
   try {
      if state <= b {
         if state == a { state = b; y = 1 return }
         if state == b { state = -b; l(); state = v }
      }
      else if state <= u {
         if state == c {
            state = -a
            a = arrIter(err)
            b = a.get()
            state = e
         }
         if state == e {
            state = -e
            if unornull(b) { state = l }
            else { state = r }
         }
         if state == l { state = n; y = 1; return l }
         if state == n { state = r; b = sent }
         if state == r { e = b; state = v; _ret = 1; _retVal = 12; return _retVal }
      }
   }
   catch (err) {
      if state < 0: state = -state
      _errVal = err; 
      if state > b { _err = 1; state = v; throw err }
      state = c; _err = 1; continue
   }
   finally {
      if y == 0 {
         if state == v { y = 1; state = w; return }
         if state == w { 
            state = -w
            if _err == 1 { throw _errVal }
            if _ret == 1 { return _retVal }
            state = aftertry
         }
       }
   }
 } while (false);
}

