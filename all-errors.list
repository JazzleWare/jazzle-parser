'arrow.paren.no.arrow'
'assignable.unsatisfied'
'assig.not.first'
'assig.not.simple'
'assig.to.eval.or.arguments'
'assig.unsatisfied'
'binding.to.eval.or.arguments'
'block.dependent.is.unfinished'
'block.dependent.no.opening.curly'
'block.unfinished'
'break.no.such.label'
'break.not.in.breakable'
'call.args.is.unfinished'
'catch.has.no.end.paren'
'catch.has.no.opening.paren'
'class.mem.name.is.ctor'
'class.or.obj.mem.name'
'class.super.call'
'class.super.lone'
'class.super.mem'
'comment.multi.unfinished'
'cond.colon'
'const.not.in.v5'
'contains.assigned.eval.or.arguments'
'continue.no.such.label'
'continue.not.a.loop.label'
'continue.not.in.loop'
'do.has.no.closing.paren'
'do.has.no.opening.paren'
'do.has.no.while'
'esc.8.or.9'
'export.all.no.from'
'export.all.not.*'
'export.all.source.not.str'
'export.default.const.let'
'export.named.has.reserved'
'export.named.list.not.finished'
'export.named.no.exports'
'export.named.not.id.from'
'export.named.source.not.str'
'export.not.in.module'
'export.specifier.after.as.id'
'export.specifier.not.as'
'for.in.or.of.multi'
'for.iter.no.end.paren'
'for.iter.not.of.in'
'for.simple.head.is.unsatisfied'
'for.simple.no.end.paren'
'for.simple.no.init.comma'
'for.simple.no.test.comma'
'for.with.no.opening.paren'
'func.args.has.dup'
'func.args.no.end.paren'
'func.args.no.opening.paren'
'func.args.not.enough'
'func.body.is.empty.expr'
'func.body.is.unfinished'
'func.strict.non.simple.param'
'hex.esc.byte.not.hex'
'id.esc.must.be.idbody'
'id.esc.must.be.idhead'
'id.multi.must.be.idbody'
'id.multi.must.be.idhead'
'id.slash.no.u'
'id.u.not.after.slash'
'if.has.no.closing.paren'
'if.has.no.opening.paren'
'import.from'
'import.namespace.specifier.local.not.id'
'import.namespace.specifier.no.as'
'import.namespace.specifier.not.*'
'import.no.elem.yet.comma'
'import.not.in.module'
'import.source.is.not.str'
'import.specifier.list.unfinished'
'import.specifier.local.not.id'
'import.specifier.no.as'
'incdec.post.not.simple.assig'
'incdec.pre.not.simple.assig'
'label.is.a.dup'
'mem.unfinished'
'meta.new.has.unknown.prop'
'missing.name'
'new.args.is.unfinished'
'new.head.is.not.valid'
'nexpr.null.head'
'no.semi'
'not.stmt'
'null.stmt'
'num.idhead.tail'
'num.legacy.oct'
'num.with.first.not.valid'
'num.with.no.digits'
'obj.prop.assig.not.allowed'
'obj.prop.assig.not.assigop'
'obj.prop.assig.not.id'
'obj.proto.has.dup'
'obj.unfinished'
'paren.has.an.spread.elem'
'paren.unfinished'
'paren.with.an.unsatisfied.assig'
'pat.array.is.unfinished'
'pat.obj.is.unfinished'
'program.unfinished'
'prop.dyna.is.unfinished'
'prop.dyna.no.expr'
'regex.flag.is.dup'
'regex.not.valid'
'regex.unfinished'
'reserved.id'
'rest.has.no.arg'
'return.not.in.a.function'
'stmt.null'
'strict.let.is.id'
'strict.oct.str.esc'
'str.newline'
'str.unfinished'
'switch.case.has.no.colon'
'switch.has.a.dup.default'
'switch.has.no.closing.paren'
'switch.has.no.opening.curly'
'switch.has.no.opening.paren'
'switch.unfinished'
'templ.expr.is.unfinished'
'templ.lit.is.unfinished'
'throw.has.newline'
'try.has.no.tail'
'u.curly.is.unfinished'
'u.curly.not.in.range'
'u.esc.hex'
'u.second.esc.not.u'
'u.second.not.in.range'
'var.decl.neither.of.in'
'var.has.an.empty.declarator'
'var.has.no.declarators'
'while.has.no.closing.paren'
'while.has.no.opening.paren'
'with.has.no.end.paren'
'with.has.no.opening.paren'
'with.strict'
'yield.as.an.id'
'yield.has.no.expr.deleg'
